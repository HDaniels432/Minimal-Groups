// This Magma script searches for subgroups of GL_2(Z/2^(n) Z)
// that contain the kernel of reduction mod 2^n, have surjective determinant
// and only three maximal subgroups. We assume n >= 3.

Attach("gl2.m");
load "gl2data.m";

// For n = 3 it takes 14.49 seconds. 261 passes 4 found
// For n = 4 it takes 276.019 seconds. 1361 passes and 44 found
// For n = 5 it takes 3800.53 seconds. 5447 passes and 340 found
// For n = 6 it takes 53619.72 seconds. 18617 passes and 1580 found
n := 7;
G := GL(2,Integers(2^n));
PG, iso := PCGroup(G);
isoinv := Inverse(iso);
detim := GL(1,Integers(8));
detmod8 := hom<G -> detim | [<g,detim![Determinant(g)]> : g in Generators(G)]>;
K := Kernel(detmod8);
mo := MinimalOvergroups(G,K);
start := sub<G | G![1,1,0,1], G![1,0,2,1], G![3,0,0,1], G![5,0,0,1]>;

avoidlist := [ iso(mo[1]), iso(mo[2]), iso(mo[3])];
found := <>;
queue := [ iso(start) ];
all := [ iso(start)];

SetLogFile("minsearchlog" cat IntegerToString(n) cat ".txt");

// While the queue is not empty, take an element out of the queue. 
// Enumerate the maximal subgroups.
// If there are three maximal subgroups, add it to the found list.
// If there are more than three maximal subgroups, then find an order 4 subgroup of 
// Q/phi(Q) and use this to create an option for a smaller group.

// Check if that group is conjugate to an element of found or queue, if it is contained
// in any subgroup in avoidlist, and whether or not it contains redker.
// If it is good, add it to queue. Repeat until the queue is empty.

it := 0;
while #queue gt 0 do
  it := it + 1;
  cur := queue[1];
  Remove(~queue,1);  
  printf "Pass %o through queue. Current order is %o. Queue size is %o.\n",it,#cur,#queue;
  FR := FrattiniSubgroup(cur);
  if Index(cur,FR) eq 4 then
    printf "Subgroup looks good. Converting to matrix group and lifting.\n";
    matcur := isoinv(cur);
    lv, matcurred := GL2Level(matcur);
    matcur2 := GL2Lift(matcurred,2*lv);
    if #MaximalSubgroups(matcur2) eq 3 then
      printf "Subgroup is good!\n";
      Append(~found,GL2MinimizeGenerators(matcur)); 
    end if;
  else
    RT := RightTransversal(cur,FR);
    elt1 := [ RT[i] : i in [1..#RT] | not (RT[i] in avoidlist[1])];
    elt2 := [ RT[j] : j in [1..#RT] | (RT[j] in avoidlist[1]) and (not (RT[j] in avoidlist[2])) ];
    for g1 in elt1 do
      for g2 in elt2 do
      	targetord := 4*#FR;
      	genlist := [ g1, g2];
      	cursub := sub<cur | genlist>;
      	while #cursub lt targetord do
      	  newelt := Random(FR);
      	  tempcursub := sub<cur | genlist, newelt>;
      	  if #tempcursub gt #cursub then
      	  	Append(~genlist,newelt);
      	  	cursub := tempcursub;
      	  end if;
      	end while;
      	newsub := cursub;
        if &and [ not IsConjugate(PG,all[j],newsub) : j in [1..#all]] then
          Append(~queue,newsub);
          Append(~all,newsub);
        end if;
      end for;
    end for;
  end if;
end while;

// Write found to file
outfile := "minfound" cat IntegerToString(n) cat ".txt";
PrintFile(outfile,"subs := <");
for i in [1..#found] do
  lev := Characteristic(BaseRing(found[i]));
  genstr := "";
  gens := SetToSequence(Generators(found[i]));
  for j in [1..#gens] do
    genstr := genstr cat Sprintf("%o",Eltseq(gens[j]));
    if (j ne #gens) then
      genstr := genstr cat ",";
    end if;
  end for;
  if (i ne #found) then
    PrintFile(outfile,Sprintf("sub<GL(2,Integers(%o)) | [%o]>,",lev,genstr));
  else
    PrintFile(outfile,Sprintf("sub<GL(2,Integers(%o)) | [%o]>",lev,genstr));
  end if;
end for;
PrintFile(outfile,">;");
quit;
