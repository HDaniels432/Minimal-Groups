Attach("~/GL2.m");
load "gl2data.m";
X2 := GL2Load("~/GL2_big2adic.txt");

function ancestors(label)
  found := X2[label]`parents;
  queue := found;
  while #queue gt 0 do
    cur := queue[1];
    Remove(~queue,1);
    new := X2[cur]`parents;
    for d in new do
      if not (d in found) then
        Append(~queue,d);
        Append(~found,d);
      end if;
    end for;
  end while;
  return GL2SortLabels(found);
end function;


GroupLabels := [
                "8.24.0.44", "8.24.0.86", 
                "8.24.0.123", "8.24.0.125",

                "16.48.0.25", "16.48.0.26", "16.48.0.82", "16.48.0.83", 
                "16.48.0.234", "16.48.0.235", "16.48.0.238", "16.48.0.239", 

                "32.96.0.2", "32.96.0.4", "32.96.0.26", "32.96.0.28",
                "32.96.0.101", "32.96.0.103", "32.96.0.105", "32.96.0.107",

                "32.96.0.1", "32.96.0.3", "32.96.0.25", "32.96.0.27",//X238a-d
                "32.96.0.102",  "32.96.0.104",  "32.96.0.106", "32.96.0.108"//X239a-d
                ];


Pol<x,y,z> := PolynomialRing(Rationals(), 3);

GroupModels := AssociativeArray();
jMapNum := AssociativeArray();
jMapDenom:= AssociativeArray();

GroupModels["8.24.0.44"] := x^2+64*y^2+z^2;//
GroupModels["8.24.0.86"] := x^2+64*y^2+z^2;//

BaseFields := AssociativeArray();

P2<X1,Y1,Z1> := ProjectiveSpace(Rationals(),2);
model := Evaluate(x^2+64*y^2+z^2, [X1,Y1,Z1]);
Field<a,b> := FunctionField(Curve(P2,model));

BaseFields["8.24.0.44"] := Field;
BaseFields["8.24.0.86"] := Field;

GroupModels["8.24.0.123"] := 2*x^2+y^2+64*z^2;//
GroupModels["8.24.0.125"] := 2*x^2+y^2+64*z^2;//

model := Evaluate(2*x^2+y^2+64*z^2, [X1,Y1,Z1]);
Field<a,b> := FunctionField(Curve(P2,model));

BaseFields["8.24.0.123"] := Field;
BaseFields["8.24.0.125"] := Field;

GroupModels["16.48.0.25"] := x^2+4*y^2+z^2;//
GroupModels["16.48.0.26"] := x^2+4*y^2+z^2;//
GroupModels["16.48.0.82"] := x^2+4*y^2+z^2;//
GroupModels["16.48.0.83"] := x^2+4*y^2+z^2;//

model := Evaluate(x^2+4*y^2+z^2, [X1,Y1,Z1]);
Field<a,b> := FunctionField(Curve(P2,model));

BaseFields["16.48.0.25"] := Field;
BaseFields["16.48.0.26"] := Field;
BaseFields["16.48.0.82"] := Field;
BaseFields["16.48.0.83"] := Field;



GroupModels["16.48.0.234"] := x^2+4*y^2+z^2;//
GroupModels["16.48.0.235"] := x^2+4*y^2+z^2;//
GroupModels["16.48.0.238"] := x^2+4*y^2+z^2;//
GroupModels["16.48.0.239"] := x^2+4*y^2+z^2;//

model := Evaluate(x^2+4*y^2+z^2, [X1,Y1,Z1]);
Field<a,b> := FunctionField(Curve(P2,model));

BaseFields["16.48.0.234"] := Field;
BaseFields["16.48.0.235"] := Field;
BaseFields["16.48.0.238"] := Field;
BaseFields["16.48.0.239"] := Field;



GroupModels["32.96.0.2"] := 4*x^2+y^2+z^2;//
GroupModels["32.96.0.4"] := 4*x^2+y^2+z^2;//
GroupModels["32.96.0.26"] := 4*x^2+y^2+z^2;//
GroupModels["32.96.0.28"] := 4*x^2+y^2+z^2;//

model := Evaluate(4*x^2+y^2+z^2, [X1,Y1,Z1]);
Field<a,b> := FunctionField(Curve(P2,model));

BaseFields["32.96.0.2"] := Field;
BaseFields["32.96.0.4"] := Field;
BaseFields["32.96.0.26"] := Field;
BaseFields["32.96.0.28"] := Field;



GroupModels["32.96.0.101"] := 4*x^2+y^2+z^2;//
GroupModels["32.96.0.105"] := 4*x^2+y^2+z^2;//
GroupModels["32.96.0.107"] := 4*x^2+y^2+z^2;//
GroupModels["32.96.0.103"] := 4*x^2+y^2+z^2;//

model := Evaluate(4*x^2+y^2+z^2, [X1,Y1,Z1]);
Field<a,b> := FunctionField(Curve(P2,model));

BaseFields["32.96.0.101"] := Field;
BaseFields["32.96.0.105"] := Field;
BaseFields["32.96.0.107"] := Field;
BaseFields["32.96.0.103"] := Field;




GroupModels["32.96.0.1"] := Rationals();
GroupModels["32.96.0.3"] := Rationals();
GroupModels["32.96.0.25"] := Rationals();
GroupModels["32.96.0.27"] := Rationals();


BaseFields["32.96.0.1"] := Rationals();
BaseFields["32.96.0.3"] := Rationals();
BaseFields["32.96.0.25"] := Rationals();
BaseFields["32.96.0.27"] := Rationals();


GroupModels["32.96.0.102"] := Rationals();
GroupModels["32.96.0.104"] := Rationals();
GroupModels["32.96.0.106"] := Rationals();
GroupModels["32.96.0.108"] := Rationals();

BaseFields["32.96.0.102"] := Rationals();
BaseFields["32.96.0.104"] := Rationals();
BaseFields["32.96.0.106"] := Rationals();
BaseFields["32.96.0.108"] := Rationals();







jMapNum["8.24.0.44"] := 2^7*((x^2-4*x*z+z^2)^3);
jMapDenom["8.24.0.44"] := 1*((x-z)^2*(x^2+z^2)^2);

jMapNum["8.24.0.86"] := 2^7*((x^2-4*x*z+z^2)^3);
jMapDenom["8.24.0.86"] := 1*((x-z)^2*(x^2+z^2)^2);


jMapNum["8.24.0.123"] := 2^2*((x^2+8*z^2)^3);
jMapDenom["8.24.0.123"] := 1*(z^4*x^2);

jMapNum["8.24.0.125"] := 2^2*((x^2+8*z^2)^3);
jMapDenom["8.24.0.125"] := 1*(z^4*x^2);

jMapNum["16.48.0.25"] := 2^7*((x^4+8*x^3*z+2*x^2*z^2-8*x*z^3+z^4)^3);
jMapDenom["16.48.0.25"] := 1*((x^2+z^2)^4*(x^2+2*x*z-z^2)^2);

jMapNum["16.48.0.26"] := 2^7*((x^4+8*x^3*z+2*x^2*z^2-8*x*z^3+z^4)^3);
jMapDenom["16.48.0.26"] := 1*((x^2+z^2)^4*(x^2+2*x*z-z^2)^2);



jMapNum["16.48.0.82"] := 2^7*((x^4+8*x^3*z+2*x^2*z^2-8*x*z^3+z^4)^3);
jMapDenom["16.48.0.82"] := 1*((x^2+z^2)^4*(x^2+2*x*z-z^2)^2);

jMapNum["16.48.0.83"] := 2^7*((x^4+8*x^3*z+2*x^2*z^2-8*x*z^3+z^4)^3);
jMapDenom["16.48.0.83"] := 1*((x^2+z^2)^4*(x^2+2*x*z-z^2)^2);


jMapNum["16.48.0.234"] := 2^5*((7*x^4-4*x^3*z+14*x^2*z^2+4*x*z^3+7*z^4)^3);
jMapDenom["16.48.0.234"] := 1*((x^2+z^2)^2*(x^2+2*x*z-z^2)^4);

jMapNum["16.48.0.235"] := 2^5*((7*x^4-4*x^3*z+14*x^2*z^2+4*x*z^3+7*z^4)^3);
jMapDenom["16.48.0.235"] := 1*((x^2+z^2)^2*(x^2+2*x*z-z^2)^4);

jMapNum["16.48.0.238"] := 2^5*((7*x^4-4*x^3*z+14*x^2*z^2+4*x*z^3+7*z^4)^3);
jMapDenom["16.48.0.238"] := 1*((x^2+z^2)^2*(x^2+2*x*z-z^2)^4);

jMapNum["16.48.0.239"] := 2^5*((7*x^4-4*x^3*z+14*x^2*z^2+4*x*z^3+7*z^4)^3);
jMapDenom["16.48.0.239"] := 1*((x^2+z^2)^2*(x^2+2*x*z-z^2)^4);



jMapNum["32.96.0.1"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.1"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);

jMapNum["32.96.0.3"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.3"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);

jMapNum["32.96.0.25"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.25"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);

jMapNum["32.96.0.27"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.27"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);;



jMapNum["32.96.0.4"] := 2^8*(2*x^32-20*x^30*y*z-192*x^30*z^2-306*x^28*y*z^3-5104*x^28*z^4-2014*x^26*y*z^5-45024*x^26*z^6-6437*x^24*y*z^7-200892*x^24*z^8-11440*x^22*y*z^9-537120*x^22*z^10-12376*x^20*y*z^11-940472*x^20*z^12-8568*x^18*y*z^13-1136944*x^18*z^14-3876*x^16*y*z^15-980627*x^16*z^16-1140*x^14*y*z^17-615296*x^14*z^18-210*x^12*y*z^19-283360*x^12*z^20-22*x^10*y*z^21-95680*x^10*z^22-x^8*y*z^23-23400*x^8*z^24-4032*x^6*z^26-464*x^4*z^28-32*x^2*z^30-z^32);
jMapDenom["32.96.0.4"] := 1*(x^16*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^2);

jMapNum["32.96.0.2"] := 2^8*(2*x^32-20*x^30*y*z-192*x^30*z^2-306*x^28*y*z^3-5104*x^28*z^4-2014*x^26*y*z^5-45024*x^26*z^6-6437*x^24*y*z^7-200892*x^24*z^8-11440*x^22*y*z^9-537120*x^22*z^10-12376*x^20*y*z^11-940472*x^20*z^12-8568*x^18*y*z^13-1136944*x^18*z^14-3876*x^16*y*z^15-980627*x^16*z^16-1140*x^14*y*z^17-615296*x^14*z^18-210*x^12*y*z^19-283360*x^12*z^20-22*x^10*y*z^21-95680*x^10*z^22-x^8*y*z^23-23400*x^8*z^24-4032*x^6*z^26-464*x^4*z^28-32*x^2*z^30-z^32);
jMapDenom["32.96.0.2"] := 1*(x^16*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^2);

jMapNum["32.96.0.26"] := 2^8*(2*x^32-20*x^30*y*z-192*x^30*z^2-306*x^28*y*z^3-5104*x^28*z^4-2014*x^26*y*z^5-45024*x^26*z^6-6437*x^24*y*z^7-200892*x^24*z^8-11440*x^22*y*z^9-537120*x^22*z^10-12376*x^20*y*z^11-940472*x^20*z^12-8568*x^18*y*z^13-1136944*x^18*z^14-3876*x^16*y*z^15-980627*x^16*z^16-1140*x^14*y*z^17-615296*x^14*z^18-210*x^12*y*z^19-283360*x^12*z^20-22*x^10*y*z^21-95680*x^10*z^22-x^8*y*z^23-23400*x^8*z^24-4032*x^6*z^26-464*x^4*z^28-32*x^2*z^30-z^32);
jMapDenom["32.96.0.26"] := 1*(x^16*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^2);

jMapNum["32.96.0.28"] := 2^8*(2*x^32-20*x^30*y*z-192*x^30*z^2-306*x^28*y*z^3-5104*x^28*z^4-2014*x^26*y*z^5-45024*x^26*z^6-6437*x^24*y*z^7-200892*x^24*z^8-11440*x^22*y*z^9-537120*x^22*z^10-12376*x^20*y*z^11-940472*x^20*z^12-8568*x^18*y*z^13-1136944*x^18*z^14-3876*x^16*y*z^15-980627*x^16*z^16-1140*x^14*y*z^17-615296*x^14*z^18-210*x^12*y*z^19-283360*x^12*z^20-22*x^10*y*z^21-95680*x^10*z^22-x^8*y*z^23-23400*x^8*z^24-4032*x^6*z^26-464*x^4*z^28-32*x^2*z^30-z^32);
jMapDenom["32.96.0.28"] := 1*(x^16*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^2);



jMapNum["32.96.0.101"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.101"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);

jMapNum["32.96.0.103"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.103"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);

jMapNum["32.96.0.105"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.105"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);

jMapNum["32.96.0.107"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.107"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);



jMapNum["32.96.0.104"] := 2^5*((x-y)^48*(458752*x^16+524288*x^15*y+917504*x^14*y^2-4587520*x^13*y^3+802816*x^12*y^4+8945664*x^11*y^5+401408*x^10*y^6-5857280*x^9*y^7+125440*x^8*y^8+1464320*x^7*y^9+25088*x^6*y^10-139776*x^5*y^11+3136*x^4*y^12+4480*x^3*y^13+224*x^2*y^14-32*x*y^15+7*y^16)^3);
jMapDenom["32.96.0.104"] := 1*((x-y)^48*(4*x^2+y^2)^8*(256*x^8-1024*x^7*y-1792*x^6*y^2+1792*x^5*y^3+1120*x^4*y^4-448*x^3*y^5-112*x^2*y^6+16*x*y^7+y^8)^4);

jMapNum["32.96.0.102"] := 2^5*((x-y)^48*(458752*x^16+524288*x^15*y+917504*x^14*y^2-4587520*x^13*y^3+802816*x^12*y^4+8945664*x^11*y^5+401408*x^10*y^6-5857280*x^9*y^7+125440*x^8*y^8+1464320*x^7*y^9+25088*x^6*y^10-139776*x^5*y^11+3136*x^4*y^12+4480*x^3*y^13+224*x^2*y^14-32*x*y^15+7*y^16)^3);
jMapDenom["32.96.0.102"] := 1*((x-y)^48*(4*x^2+y^2)^8*(256*x^8-1024*x^7*y-1792*x^6*y^2+1792*x^5*y^3+1120*x^4*y^4-448*x^3*y^5-112*x^2*y^6+16*x*y^7+y^8)^4);

jMapNum["32.96.0.106"] := 2^5*((x-y)^48*(458752*x^16+524288*x^15*y+917504*x^14*y^2-4587520*x^13*y^3+802816*x^12*y^4+8945664*x^11*y^5+401408*x^10*y^6-5857280*x^9*y^7+125440*x^8*y^8+1464320*x^7*y^9+25088*x^6*y^10-139776*x^5*y^11+3136*x^4*y^12+4480*x^3*y^13+224*x^2*y^14-32*x*y^15+7*y^16)^3);
jMapDenom["32.96.0.106"] := 1*((x-y)^48*(4*x^2+y^2)^8*(256*x^8-1024*x^7*y-1792*x^6*y^2+1792*x^5*y^3+1120*x^4*y^4-448*x^3*y^5-112*x^2*y^6+16*x*y^7+y^8)^4);

jMapNum["32.96.0.108"] := 2^5*((x-y)^48*(458752*x^16+524288*x^15*y+917504*x^14*y^2-4587520*x^13*y^3+802816*x^12*y^4+8945664*x^11*y^5+401408*x^10*y^6-5857280*x^9*y^7+125440*x^8*y^8+1464320*x^7*y^9+25088*x^6*y^10-139776*x^5*y^11+3136*x^4*y^12+4480*x^3*y^13+224*x^2*y^14-32*x*y^15+7*y^16)^3);
jMapDenom["32.96.0.108"] := 1*((x-y)^48*(4*x^2+y^2)^8*(256*x^8-1024*x^7*y-1792*x^6*y^2+1792*x^5*y^3+1120*x^4*y^4-448*x^3*y^5-112*x^2*y^6+16*x*y^7+y^8)^4);

jMapNum["32.96.0.1"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.1"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);

jMapNum["32.96.0.3"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.3"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);

jMapNum["32.96.0.25"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.25"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);

jMapNum["32.96.0.27"] := 2^7*((x-y)^48*(65536*x^16+1048576*x^15*y+131072*x^14*y^2-9175040*x^13*y^3+114688*x^12*y^4+17891328*x^11*y^5+57344*x^10*y^6-11714560*x^9*y^7+17920*x^8*y^8+2928640*x^7*y^9+3584*x^6*y^10-279552*x^5*y^11+448*x^4*y^12+8960*x^3*y^13+32*x^2*y^14-64*x*y^15+y^16)^3);
jMapDenom["32.96.0.27"] := 1*((x-y)^48*(4*x^2+y^2)^16*(256*x^8+1024*x^7*y-1792*x^6*y^2-1792*x^5*y^3+1120*x^4*y^4+448*x^3*y^5-112*x^2*y^6-16*x*y^7+y^8)^2);



jMapNum["32.96.0.102"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.102"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);

jMapNum["32.96.0.104"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.104"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);

jMapNum["32.96.0.106"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.106"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);

jMapNum["32.96.0.108"] := 2^4*(10976*x^40+53312*x^38*y*z-336896*x^38*z^2-61280*x^36*y*z^3-1580288*x^36*z^4-1411488*x^34*y*z^5-1559040*x^34*z^6-4662000*x^32*y*z^7+5675712*x^32*z^8-7444096*x^30*y*z^9+22806016*x^30*z^10-5010240*x^28*y*z^11+42699904*x^28*z^12+3846080*x^26*y*z^13+52212992*x^26*z^14+14418720*x^24*y*z^15+45103440*x^24*z^16+20602080*x^22*y*z^17+28303616*x^22*z^18+19869360*x^20*y*z^19+13034560*x^20*z^20+14290320*x^18*y*z^21+4401280*x^18*z^22+7887960*x^16*y*z^23+1076400*x^16*z^24+3365856*x^14*y*z^25+185472*x^14*z^26+1107568*x^12*y*z^27+21344*x^12*z^28+278256*x^10*y*z^29+1472*x^10*z^30+52360*x^8*y*z^31+46*x^8*z^32+7140*x^6*y*z^33+666*x^4*y*z^35+38*x^2*y*z^37+y*z^39);
jMapDenom["32.96.0.108"] := 1*(x^8*(2*x^8+16*x^6*z^2+20*x^4*z^4+8*x^2*z^6+z^8)^4);





Ancestors1 := AssociativeArray();
for GrLb in GroupLabels do
    rec := X2[GrLb];
    for red in rec`reductions do
        if not -Identity(X2[red]`subgroup) in X2[red]`subgroup then
            Ancestors1[GrLb]:=red;
        end if;
    end for;
end for;


Ancestors1["8.24.0.123"] := "8.12.0.24";
Ancestors1["8.24.0.125"] := "8.12.0.23";


/*
for k in Keys(Ancestors1) do
    k;
    k,X[Ancestors1[k]]`Emap;
end for;
*/

F<t> := FunctionField(Rationals());
EmapArray := AssociativeArray();

for k in Keys(Ancestors1) do
    EmapArray[k] := [X2[Ancestors1[k]]`Emap[1],X2[Ancestors1[k]]`Emap[2]];
end for;



function CleanModel(E1)
    E := WeierstrassModel(E1);
    T, map := TwoTorsionSubgroup(E);
    F := BaseField(E);
    assert #T gt 1;
    as := aInvariants(E);
    assert as[1] eq as[2] and as[2] eq as[3] and as[1] eq 0;
    P := map(T.1);
    xCo := P[1];
    P<X> := PolynomialRing(F);
    pol := Evaluate(DefiningPolynomial(E),[X+xCo,0,1]);
    a := Coefficients(pol)[1];
    assert a eq 0;
    c := Coefficients(pol)[4];
    E := EllipticCurve(1/c*pol);
    return E;
end function;


Ancestors2 := AssociativeArray();

Ancestors2["16.48.0.25"] := "16.24.0.43";
Ancestors2["16.48.0.26"] := "16.24.0.44";

Ancestors2["16.48.0.82"] := "16.24.0.43";
Ancestors2["16.48.0.83"] := "16.24.0.44";

Ancestors2["16.48.0.234"] := "16.24.0.29";
Ancestors2["16.48.0.235"] := "16.24.0.30";

Ancestors2["16.48.0.238"] := "16.24.0.29";
Ancestors2["16.48.0.239"] := "16.24.0.30";

Ancestors2["8.24.0.44"] := "8.12.0.37";
Ancestors2["8.24.0.86"] := "8.12.0.38";

Ancestors2["8.24.0.123"] := "8.12.0.21";
Ancestors2["8.24.0.125"] := "8.12.0.22";

F<t> := FunctionField(Rationals());
EmapArray := AssociativeArray();
for k in Keys(Ancestors1) do
    EmapArray[k] := [X2[Ancestors1[k]]`Emap[1],X2[Ancestors1[k]]`Emap[2]];
    if k in Keys(Ancestors2) and assigned X2[Ancestors2[k]]`Emap then 
        k2 :=  Ancestors2[k];
        EmapArray[k2] := [X2[k2]`Emap[1],X2[k2]`Emap[2]];
    end if;
end for;


function SortUpToIso(list)
    Array := AssociativeArray();
    for E in list do
        if {IsIsomorphic(E,E1) : E1 in Keys(Array)} in {{}, {false}} then
            Array[E] := [E];
        else
            for E1 in Keys(Array) do   
                if IsIsomorphic(E,E1) then
                    Append(~Array[E1],E);
                end if;
            end for;
        end if;
    end for;
    return Array;
end function;







FinalModels := AssociativeArray();
F<t> := FunctionField(Rationals());

//The following models were computed in RZB and are taking from there.
done := ["32.96.0.1","32.96.0.3","32.96.0.25",
        "32.96.0.27","32.96.0.102","32.96.0.104",
        "32.96.0.106","32.96.0.108"];


X238a := sub<GL(2,Integers(32)) | [21,2,0,1],[21,2,21,1]>;
X238b := sub<GL(2,Integers(32)) | [31,0,31,1],[21,2,21,1]>;
X238c := sub<GL(2,Integers(32)) | [31,0,29,1],[17,2,19,1]>;
X238d := sub<GL(2,Integers(32)) | [31,0,31,1],[17,2,19,1]>;

X239a := sub<GL(2,Integers(32)) | [15,6,15,3],[31,2,0,1]>;
X239b := sub<GL(2,Integers(32)) | [15,6,15,3],[29,0,29,1]>;
X239c := sub<GL(2,Integers(32)) | [29,2,29,1],[29,0,29,1 ]>;
X239d := sub<GL(2,Integers(32)) | [29,2,29,1],[15,0,15,3]>;



assert IsConjugate(GL(2,Integers(32)),X238a,X2["32.96.0.25"]`subgroup);
assert IsConjugate(GL(2,Integers(32)),X238b,X2["32.96.0.1"]`subgroup);
assert IsConjugate(GL(2,Integers(32)),X238c,X2["32.96.0.3"]`subgroup);
assert IsConjugate(GL(2,Integers(32)),X238d,X2["32.96.0.27"]`subgroup);

assert IsConjugate(GL(2,Integers(32)),X239a,X2["32.96.0.106"]`subgroup);
assert IsConjugate(GL(2,Integers(32)),X239b,X2["32.96.0.102"]`subgroup);
assert IsConjugate(GL(2,Integers(32)),X239c,X2["32.96.0.104"]`subgroup);
assert IsConjugate(GL(2,Integers(32)),X239d,X2["32.96.0.108"]`subgroup);

FinalModels["32.96.0.1"]:= EllipticCurve([0,0,0,927712935936*t^32 - 22265110462464*t^31 + 
122458107543552*t^30 + 150289495621632*t^29 - 2071119129477120*t^28 - 
29222957481984*t^27 + 13151954364530688*t^26 - 189601331281920*t^25 - 
38103851949096960*t^24 - 65142842720256*t^23 + 58454046947672064*t^22 + 
36506953580544*t^21 - 51136738344566784*t^20 + 27130167558144*t^19 + 
26695442544721920*t^18 + 4157041803264*t^17 - 8508394989158400*t^16 - 
1039260450816*t^15 + 1668465159045120*t^14 - 423908868096*t^13 - 
199752884158464*t^12 - 35651321856*t^11 + 14271007555584*t^10 + 3976003584*t^9 -
581418639360*t^8 + 723271680*t^7 + 12542681088*t^6 + 6967296*t^5 - 123448320*t^4
- 2239488*t^3 + 456192*t^2 + 20736*t + 216,1215971899390033920*t^48 - 
17509995351216488448*t^47 + 30642491864628854784*t^46 + 
643492329157205950464*t^45 - 2955723694442324951040*t^44 - 
5560517898720686112768*t^43 + 46796465752943062155264*t^42 + 
16175678986718319476736*t^41 - 358258021704617120759808*t^40 - 
13861281671487411978240*t^39 + 1553444146845336213651456*t^38 - 
6440993651288545689600*t^37 - 4136569876985713558290432*t^36 + 
9902317036530177146880*t^35 + 7159165606536589093109760*t^34 + 
1775354716033445265408*t^33 - 8367468110822365986816000*t^32 - 
2684820176786084069376*t^31 + 6781418134163434153967616*t^30 - 
495694165805660897280*t^29 - 3881474107319413131706368*t^28 + 
334382872744792424448*t^27 + 1587879439624301772275712*t^26 + 
75819372308412235776*t^25 - 467444695968303493939200*t^24 - 
18954843077103058944*t^23 + 99242464976518860767232*t^22 - 
5224732386637381632*t^21 - 15162008231716457545728*t^20 + 
484076333794590720*t^19 + 1655619661660994666496*t^18 + 163868418993291264*t^17 
- 127677430890233856000*t^16 - 6772440780767232*t^15 + 6827512365852917760*t^14 
- 2360896357662720*t^13 - 246558778106314752*t^12 + 95978284646400*t^11 + 
5787030409445376*t^10 + 12909324533760*t^9 - 83413445787648*t^8 - 
941548437504*t^7 + 680978202624*t^6 + 20229046272*t^5 - 2688215040*t^4 - 
146313216*t^3 + 1741824*t^2 + 248832*t + 4320]);;
FinalModels["32.96.0.3"] := EllipticCurve([0,0,0,927712935936*t^32 - 22265110462464*t^31 + 
122458107543552*t^30 + 150289495621632*t^29 - 2071119129477120*t^28 - 
29222957481984*t^27 + 13151954364530688*t^26 - 189601331281920*t^25 - 
38103851949096960*t^24 - 65142842720256*t^23 + 58454046947672064*t^22 + 
36506953580544*t^21 - 51136738344566784*t^20 + 27130167558144*t^19 + 
26695442544721920*t^18 + 4157041803264*t^17 - 8508394989158400*t^16 - 
1039260450816*t^15 + 1668465159045120*t^14 - 423908868096*t^13 - 
199752884158464*t^12 - 35651321856*t^11 + 14271007555584*t^10 + 3976003584*t^9 -
581418639360*t^8 + 723271680*t^7 + 12542681088*t^6 + 6967296*t^5 - 123448320*t^4
- 2239488*t^3 + 456192*t^2 + 20736*t + 216,-1215971899390033920*t^48 + 
17509995351216488448*t^47 - 30642491864628854784*t^46 - 
643492329157205950464*t^45 + 2955723694442324951040*t^44 + 
5560517898720686112768*t^43 - 46796465752943062155264*t^42 - 
16175678986718319476736*t^41 + 358258021704617120759808*t^40 + 
13861281671487411978240*t^39 - 1553444146845336213651456*t^38 + 
6440993651288545689600*t^37 + 4136569876985713558290432*t^36 - 
9902317036530177146880*t^35 - 7159165606536589093109760*t^34 - 
1775354716033445265408*t^33 + 8367468110822365986816000*t^32 + 
2684820176786084069376*t^31 - 6781418134163434153967616*t^30 + 
495694165805660897280*t^29 + 3881474107319413131706368*t^28 - 
334382872744792424448*t^27 - 1587879439624301772275712*t^26 - 
75819372308412235776*t^25 + 467444695968303493939200*t^24 + 
18954843077103058944*t^23 - 99242464976518860767232*t^22 + 
5224732386637381632*t^21 + 15162008231716457545728*t^20 - 
484076333794590720*t^19 - 1655619661660994666496*t^18 - 163868418993291264*t^17 
+ 127677430890233856000*t^16 + 6772440780767232*t^15 - 6827512365852917760*t^14 
+ 2360896357662720*t^13 + 246558778106314752*t^12 - 95978284646400*t^11 - 
5787030409445376*t^10 - 12909324533760*t^9 + 83413445787648*t^8 + 
941548437504*t^7 - 680978202624*t^6 - 20229046272*t^5 + 2688215040*t^4 + 
146313216*t^3 - 1741824*t^2 - 248832*t - 4320]);;
FinalModels["32.96.0.25"] := EllipticCurve([0,0,0,231928233984*t^32 - 5566277615616*t^31 + 
30614526885888*t^30 + 37572373905408*t^29 - 517779782369280*t^28 - 
7305739370496*t^27 + 3287988591132672*t^26 - 47400332820480*t^25 - 
9525962987274240*t^24 - 16285710680064*t^23 + 14613511736918016*t^22 + 
9126738395136*t^21 - 12784184586141696*t^20 + 6782541889536*t^19 + 
6673860636180480*t^18 + 1039260450816*t^17 - 2127098747289600*t^16 - 
259815112704*t^15 + 417116289761280*t^14 - 105977217024*t^13 - 
49938221039616*t^12 - 8912830464*t^11 + 3567751888896*t^10 + 994000896*t^9 - 
145354659840*t^8 + 180817920*t^7 + 3135670272*t^6 + 1741824*t^5 - 30862080*t^4 -
559872*t^3 + 114048*t^2 + 5184*t + 54,-151996487423754240*t^48 + 
2188749418902061056*t^47 - 3830311483078606848*t^46 - 80436541144650743808*t^45 
+ 369465461805290618880*t^44 + 695064737340085764096*t^43 - 
5849558219117882769408*t^42 - 2021959873339789934592*t^41 + 
44782252713077140094976*t^40 + 1732660208935926497280*t^39 - 
194180518355667026706432*t^38 + 805124206411068211200*t^37 + 
517071234623214194786304*t^36 - 1237789629566272143360*t^35 - 
894895700817073636638720*t^34 - 221919339504180658176*t^33 + 
1045933513852795748352000*t^32 + 335602522098260508672*t^31 - 
847677266770429269245952*t^30 + 61961770725707612160*t^29 + 
485184263414926641463296*t^28 - 41797859093099053056*t^27 - 
198484929953037721534464*t^26 - 9477421538551529472*t^25 + 
58430586996037936742400*t^24 + 2369355384637882368*t^23 - 
12405308122064857595904*t^22 + 653091548329672704*t^21 + 
1895251028964557193216*t^20 - 60509541724323840*t^19 - 
206952457707624333312*t^18 - 20483552374161408*t^17 + 15959678861279232000*t^16 
+ 846555097595904*t^15 - 853439045731614720*t^14 + 295112044707840*t^13 + 
30819847263289344*t^12 - 11997285580800*t^11 - 723378801180672*t^10 - 
1613665566720*t^9 + 10426680723456*t^8 + 117693554688*t^7 - 85122275328*t^6 - 
2528630784*t^5 + 336026880*t^4 + 18289152*t^3 - 217728*t^2 - 31104*t - 540]);
;
FinalModels["32.96.0.27"] := EllipticCurve([0,0,0,231928233984*t^32 - 5566277615616*t^31 + 
30614526885888*t^30 + 37572373905408*t^29 - 517779782369280*t^28 - 
7305739370496*t^27 + 3287988591132672*t^26 - 47400332820480*t^25 - 
9525962987274240*t^24 - 16285710680064*t^23 + 14613511736918016*t^22 + 
9126738395136*t^21 - 12784184586141696*t^20 + 6782541889536*t^19 + 
6673860636180480*t^18 + 1039260450816*t^17 - 2127098747289600*t^16 - 
259815112704*t^15 + 417116289761280*t^14 - 105977217024*t^13 - 
49938221039616*t^12 - 8912830464*t^11 + 3567751888896*t^10 + 994000896*t^9 - 
145354659840*t^8 + 180817920*t^7 + 3135670272*t^6 + 1741824*t^5 - 30862080*t^4 -
559872*t^3 + 114048*t^2 + 5184*t + 54,151996487423754240*t^48 - 
2188749418902061056*t^47 + 3830311483078606848*t^46 + 80436541144650743808*t^45 
- 369465461805290618880*t^44 - 695064737340085764096*t^43 + 
5849558219117882769408*t^42 + 2021959873339789934592*t^41 - 
44782252713077140094976*t^40 - 1732660208935926497280*t^39 + 
194180518355667026706432*t^38 - 805124206411068211200*t^37 - 
517071234623214194786304*t^36 + 1237789629566272143360*t^35 + 
894895700817073636638720*t^34 + 221919339504180658176*t^33 - 
1045933513852795748352000*t^32 - 335602522098260508672*t^31 + 
847677266770429269245952*t^30 - 61961770725707612160*t^29 - 
485184263414926641463296*t^28 + 41797859093099053056*t^27 + 
198484929953037721534464*t^26 + 9477421538551529472*t^25 - 
58430586996037936742400*t^24 - 2369355384637882368*t^23 + 
12405308122064857595904*t^22 - 653091548329672704*t^21 - 
1895251028964557193216*t^20 + 60509541724323840*t^19 + 
206952457707624333312*t^18 + 20483552374161408*t^17 - 15959678861279232000*t^16 
- 846555097595904*t^15 + 853439045731614720*t^14 - 295112044707840*t^13 - 
30819847263289344*t^12 + 11997285580800*t^11 + 723378801180672*t^10 + 
1613665566720*t^9 - 10426680723456*t^8 - 117693554688*t^7 + 85122275328*t^6 + 
2528630784*t^5 - 336026880*t^4 - 18289152*t^3 + 217728*t^2 + 31104*t + 540]);;


FinalModels["32.96.0.102"]:= EllipticCurve([0,0,0,-756*t^32 - 13824*t^31 - 38016*t^30 + 1257984*t^29
+ 16039296*t^28 + 66963456*t^27 - 231565824*t^26 - 4636624896*t^25 - 
30197041920*t^24 - 121783246848*t^23 - 346143836160*t^22 - 760381267968*t^21 - 
1500984317952*t^20 - 3151317270528*t^19 - 6790311419904*t^18 - 
12378319257600*t^17 - 16212489320448*t^16 - 12120808882176*t^15 + 
1420736495616*t^14 + 16306891259904*t^13 + 21383523237888*t^12 + 
14311390445568*t^11 + 3081581494272*t^10 - 3899081097216*t^9 - 5066891919360*t^8
- 3466636296192*t^7 - 1762125152256*t^6 - 734458281984*t^5 - 249580486656*t^4 - 
64097353728*t^3 - 11154751488*t^2 - 1132462080*t - 49545216,-7344*t^48 - 
228096*t^47 - 1783296*t^46 + 19229184*t^45 + 462309120*t^44 + 2975616000*t^43 - 
6666541056*t^42 - 252556683264*t^41 - 1988117042688*t^40 - 6747626557440*t^39 + 
16810441629696*t^38 + 382441504333824*t^37 + 2872083213103104*t^36 + 
14665967556968448*t^35 + 56535279022080000*t^34 + 166055265929428992*t^33 + 
349914212481871872*t^32 + 392427624079687680*t^31 - 505440014385807360*t^30 - 
3915677458134466560*t^29 - 11380046589762600960*t^28 - 22176780819953614848*t^27
- 31246634414150516736*t^26 - 30704055260021784576*t^25 - 
16008283247955148800*t^24 + 8421764080550805504*t^23 + 31313010525487497216*t^22
+ 43298557511482736640*t^21 + 42452562827412504576*t^20 + 
31383758135151820800*t^19 + 12899349951808536576*t^18 - 8623901100661014528*t^17
- 24973850881079377920*t^16 - 28556556538522632192*t^15 - 
19607238490120519680*t^14 - 6227443568747741184*t^13 + 3160628383658803200*t^12 
+ 5923598974517772288*t^11 + 4513493882461224960*t^10 + 2258428448106086400*t^9 
+ 789879246683111424*t^8 + 183318721572372480*t^7 + 20007071671910400*t^6 - 
3386427630944256*t^5 - 2020058679214080*t^4 - 447070662033408*t^3 - 
56532507033600*t^2 - 4000762036224*t - 123211874304]);;
FinalModels["32.96.0.104"] := EllipticCurve([0,0,0,-756*t^32 - 13824*t^31 - 38016*t^30 + 1257984*t^29
+ 16039296*t^28 + 66963456*t^27 - 231565824*t^26 - 4636624896*t^25 - 
30197041920*t^24 - 121783246848*t^23 - 346143836160*t^22 - 760381267968*t^21 - 
1500984317952*t^20 - 3151317270528*t^19 - 6790311419904*t^18 - 
12378319257600*t^17 - 16212489320448*t^16 - 12120808882176*t^15 + 
1420736495616*t^14 + 16306891259904*t^13 + 21383523237888*t^12 + 
14311390445568*t^11 + 3081581494272*t^10 - 3899081097216*t^9 - 5066891919360*t^8
- 3466636296192*t^7 - 1762125152256*t^6 - 734458281984*t^5 - 249580486656*t^4 - 
64097353728*t^3 - 11154751488*t^2 - 1132462080*t - 49545216,7344*t^48 + 
228096*t^47 + 1783296*t^46 - 19229184*t^45 - 462309120*t^44 - 2975616000*t^43 + 
6666541056*t^42 + 252556683264*t^41 + 1988117042688*t^40 + 6747626557440*t^39 - 
16810441629696*t^38 - 382441504333824*t^37 - 2872083213103104*t^36 - 
14665967556968448*t^35 - 56535279022080000*t^34 - 166055265929428992*t^33 - 
349914212481871872*t^32 - 392427624079687680*t^31 + 505440014385807360*t^30 + 
3915677458134466560*t^29 + 11380046589762600960*t^28 + 22176780819953614848*t^27
+ 31246634414150516736*t^26 + 30704055260021784576*t^25 + 
16008283247955148800*t^24 - 8421764080550805504*t^23 - 31313010525487497216*t^22
- 43298557511482736640*t^21 - 42452562827412504576*t^20 - 
31383758135151820800*t^19 - 12899349951808536576*t^18 + 8623901100661014528*t^17
+ 24973850881079377920*t^16 + 28556556538522632192*t^15 + 
19607238490120519680*t^14 + 6227443568747741184*t^13 - 3160628383658803200*t^12 
- 5923598974517772288*t^11 - 4513493882461224960*t^10 - 2258428448106086400*t^9 
- 789879246683111424*t^8 - 183318721572372480*t^7 - 20007071671910400*t^6 + 
3386427630944256*t^5 + 2020058679214080*t^4 + 447070662033408*t^3 + 
56532507033600*t^2 + 4000762036224*t + 123211874304]);;
FinalModels["32.96.0.106"] := EllipticCurve([0,0,0,-189*t^32 - 3456*t^31 - 9504*t^30 + 314496*t^29 + 
4009824*t^28 + 16740864*t^27 - 57891456*t^26 - 1159156224*t^25 - 7549260480*t^24
- 30445811712*t^23 - 86535959040*t^22 - 190095316992*t^21 - 375246079488*t^20 - 
787829317632*t^19 - 1697577854976*t^18 - 3094579814400*t^17 - 4053122330112*t^16
- 3030202220544*t^15 + 355184123904*t^14 + 4076722814976*t^13 + 
5345880809472*t^12 + 3577847611392*t^11 + 770395373568*t^10 - 974770274304*t^9 -
1266722979840*t^8 - 866659074048*t^7 - 440531288064*t^6 - 183614570496*t^5 - 
62395121664*t^4 - 16024338432*t^3 - 2788687872*t^2 - 283115520*t - 
12386304,918*t^48 + 28512*t^47 + 222912*t^46 - 2403648*t^45 - 57788640*t^44 - 
371952000*t^43 + 833317632*t^42 + 31569585408*t^41 + 248514630336*t^40 + 
843453319680*t^39 - 2101305203712*t^38 - 47805188041728*t^37 - 
359010401637888*t^36 - 1833245944621056*t^35 - 7066909877760000*t^34 - 
20756908241178624*t^33 - 43739276560233984*t^32 - 49053453009960960*t^31 + 
63180001798225920*t^30 + 489459682266808320*t^29 + 1422505823720325120*t^28 + 
2772097602494201856*t^27 + 3905829301768814592*t^26 + 3838006907502723072*t^25 +
2001035405994393600*t^24 - 1052720510068850688*t^23 - 3914126315685937152*t^22 -
5412319688935342080*t^21 - 5306570353426563072*t^20 - 3922969766893977600*t^19 -
1612418743976067072*t^18 + 1077987637582626816*t^17 + 3121731360134922240*t^16 +
3569569567315329024*t^15 + 2450904811265064960*t^14 + 778430446093467648*t^13 - 
395078547957350400*t^12 - 740449871814721536*t^11 - 564186735307653120*t^10 - 
282303556013260800*t^9 - 98734905835388928*t^8 - 22914840196546560*t^7 - 
2500883958988800*t^6 + 423303453868032*t^5 + 252507334901760*t^4 + 
55883832754176*t^3 + 7066563379200*t^2 + 500095254528*t + 15401484288]);;
FinalModels["32.96.0.108"] := EllipticCurve([0,0,0,-189*t^32 - 3456*t^31 - 9504*t^30 + 314496*t^29 + 
4009824*t^28 + 16740864*t^27 - 57891456*t^26 - 1159156224*t^25 - 7549260480*t^24
- 30445811712*t^23 - 86535959040*t^22 - 190095316992*t^21 - 375246079488*t^20 - 
787829317632*t^19 - 1697577854976*t^18 - 3094579814400*t^17 - 4053122330112*t^16
- 3030202220544*t^15 + 355184123904*t^14 + 4076722814976*t^13 + 
5345880809472*t^12 + 3577847611392*t^11 + 770395373568*t^10 - 974770274304*t^9 -
1266722979840*t^8 - 866659074048*t^7 - 440531288064*t^6 - 183614570496*t^5 - 
62395121664*t^4 - 16024338432*t^3 - 2788687872*t^2 - 283115520*t - 
12386304,-918*t^48 - 28512*t^47 - 222912*t^46 + 2403648*t^45 + 57788640*t^44 + 
371952000*t^43 - 833317632*t^42 - 31569585408*t^41 - 248514630336*t^40 - 
843453319680*t^39 + 2101305203712*t^38 + 47805188041728*t^37 + 
359010401637888*t^36 + 1833245944621056*t^35 + 7066909877760000*t^34 + 
20756908241178624*t^33 + 43739276560233984*t^32 + 49053453009960960*t^31 - 
63180001798225920*t^30 - 489459682266808320*t^29 - 1422505823720325120*t^28 - 
2772097602494201856*t^27 - 3905829301768814592*t^26 - 3838006907502723072*t^25 -
2001035405994393600*t^24 + 1052720510068850688*t^23 + 3914126315685937152*t^22 +
5412319688935342080*t^21 + 5306570353426563072*t^20 + 3922969766893977600*t^19 +
1612418743976067072*t^18 - 1077987637582626816*t^17 - 3121731360134922240*t^16 -
3569569567315329024*t^15 - 2450904811265064960*t^14 - 778430446093467648*t^13 + 
395078547957350400*t^12 + 740449871814721536*t^11 + 564186735307653120*t^10 + 
282303556013260800*t^9 + 98734905835388928*t^8 + 22914840196546560*t^7 + 
2500883958988800*t^6 - 423303453868032*t^5 - 252507334901760*t^4 - 
55883832754176*t^3 - 7066563379200*t^2 - 500095254528*t - 15401484288]);;

for k in GroupLabels do
    if k in Keys(GroupModels) and not k in done then 
        F<t> := FunctionField(Rationals());
        E :=  EllipticCurve([EmapArray[k][1], EmapArray[k][2]]);
        j1 := jInvariant(E);
        /*if not k in done then
            P2<X1,Y1,Z1> := ProjectiveSpace(Rationals(),2);
            model := Evaluate(GroupModels[k], [X1,Y1,Z1]);
            K<a,b> := FunctionField(Curve(P2,model));
        else
            FinalModels[k] := CleanModel(FinalModels[k]);
            break k;
        end if;*/

        if not k in done then
            K<a,b> := BaseFields[k];
        else
            FinalModels[k] := CleanModel(FinalModels[k]);
            break k;
        end if;

        jmapnum := Evaluate(jMapNum[k],[X1,Y1,Z1]);
        jmapdenom := Evaluate(jMapDenom[k],[X1,Y1,Z1]);
        j2 := jmapnum/jmapdenom;
        P<w> := PolynomialRing(K);
        bigpol := P!Numerator(j1)-K!j2*P!Denominator(j1); 
        roots := Roots(bigpol);
        if #roots ge 1 then
            List := [EllipticCurve([Evaluate(EmapArray[k][1],a[1]), Evaluate(EmapArray[k][2],a[1])]) : a in roots];
            SpecCurves := [k : k in Keys(SortUpToIso(List))];
            if #SpecCurves eq 1 then   
                k;     
                FinalModels[k] := CleanModel(SpecCurves[1]);
                Append(~done,k);
            else 
                for E1 in SpecCurves do 
                    jE1 := jInvariant(E1);
                    addkey := Ancestors2[k];
                    rec := X2[addkey];
                    jE2 := jInvariant(EllipticCurve(rec`Emap));
                    bigpol2 := P!Numerator(jE2)-jE1*P!Denominator(jE2);
                    if #Roots(bigpol2) ge 1 then
                        for pair in Roots(bigpol2) do 
                            ev := pair[1];
                            //Espec := EllipticCurve([Evaluate(aa,ev) : aa in aInvariants(E)]);
                            Etest := EllipticCurve([ Evaluate(rec`Emap[1],ev), Evaluate( rec`Emap[2], ev)]);
                            //Type(aInvariants(E1)[1]);
                            //IsIsomorphic(BaseChange(Espec,K),BaseChange(Etest,K));
                            //IsQuadraticTwist(BaseChange(Espec,K),BaseChange(Etest,K));
                            if IsIsomorphic(BaseChange(E1,K),BaseChange(Etest,K)) then
                                FinalModels[k] := CleanModel(E1);
                                if not k in done then
                                    k;
                                    Append(~done,k);
                                end if;
                                break E1;
                            end if;
                        end for;
                    end if;
                end for;
            end if;
        end if;
    end if;
end for;

   

missed := [k : k in GroupLabels | not k in done];
assert missed eq [];

/* A quick clean up */
CleanFinalModels := AssociativeArray();
for k in Keys(FinalModels) do
    CleanFinalModels[k] := CleanModel(SimplifiedModel(FinalModels[k]));
end for;

TwistFamilyLabels := AssociativeArray();

TwistFamilyLabels["8.24.0.44"] := ["8.24.0.44", "8.24.0.86"]; 
TwistFamilyLabels["8.24.0.123"] := ["8.24.0.123", "8.24.0.125"];

TwistFamilyLabels["16.48.0.25"] := ["16.48.0.25", "16.48.0.26", "16.48.0.82", "16.48.0.83"]; 
TwistFamilyLabels["16.48.0.238"] := ["16.48.0.234", "16.48.0.235", "16.48.0.238", "16.48.0.239"];

TwistFamilyLabels["32.96.0.2"] := ["32.96.0.2", "32.96.0.4", "32.96.0.26", "32.96.0.28"];
TwistFamilyLabels["32.96.0.105"] := ["32.96.0.101", "32.96.0.103", "32.96.0.105", "32.96.0.107"];

TwistFamilyLabels["32.96.0.1"] := ["32.96.0.1", "32.96.0.3", "32.96.0.25", "32.96.0.27"];
TwistFamilyLabels["32.96.0.108"] := ["32.96.0.102",  "32.96.0.104",  "32.96.0.106", "32.96.0.108"];

for k in Keys(TwistFamilyLabels) do
    for k1,k2 in TwistFamilyLabels[k] do
        assert IsQuadraticTwist(FinalModels[k1],FinalModels[k2]);
    end for;
end for;

TwistFamilies := AssociativeArray();
for k in Keys(TwistFamilyLabels) do
    TwistFamilies[k] := AssociativeArray();
    Classes := [1,-1,2,-2];
    E := FinalModels[k];
    Field := BaseField(E);
    for class in Classes do
        TwistFamilies[k][class] := [];
    end for;
    for k1 in TwistFamilyLabels[k] do
        //[k,k1];
        Field eq BaseField(FinalModels[k1]);
        boo, twfac := IsQuadraticTwist(FinalModels[k],ChangeRing(FinalModels[k1],Field));
        if boo then
            for class in Classes do
                if IsSquare(class*twfac) then
                    Append(~TwistFamilies[k][class], k1);
                end if;
            end for;
        end if;
    end for;
end for;

function IsogenousCurve(E)
    /*aInvs := aInvariants(E);
    assert aInvs[1] eq 0;
    assert aInvs[3] eq 0;
    assert aInvs[5] eq 0;
    a := aInvs[2];
    b := aInvs[4];
    return EllipticCurve([0,-2*a,0,a^2-4*b,0]);*/
    T, map := TwoTorsionSubgroup(E);
    P := map(T.1);
    return Image(TwoIsogeny(P));
end function;

/*
for k in Keys(TwistFamilies) do
    for k1 in Keys(FinalModels) do
        E := FinalModels[k];
        E1 := FinalModels[k1];
        
        if BaseField(E) eq BaseField(E1) then
            if IsIsomorphic(IsogenousCurve(E),E1) then
                [k,k1];
            end if;
        end if;
    end for;
end for;
*/


function ChangeLevel(G,n)
    I := BaseRing(G);
    if #I ge n then
    H := ChangeRing(G,Integers(n));
    end if;
    if not #I ge n then
    GL2n := GL(2,Integers(n));
    _,pi  := ChangeRing(GL(2,Integers(n)),I);
    H := sub<GL2n | Inverse(pi)(G),Kernel(pi) >;
    end if;
    return H;
end function;


function TwoIsogenousGroup(G)
    assert ChangeLevel(G,2) subset sub<GL(2,Integers(2)) | [1,1,0,1]>;
    n := #BaseRing(G);
    G2n := ChangeLevel(G,2*n);
    gen2n := Generators(G2n);
    newgen2n := [ [M[1,1],2*M[1,2],M[2,1] div 2,M[2,2]] : M in gen2n];
    return sub<GL(2,Integers(n)) |newgen2n>;
end function;

function RelatedByA2Isog(G1,G2)
    n1 := #BaseRing(G1);
    n2 := #BaseRing(G2);
    if n1 ne n2 then
        return false;
    end if;
    return IsConjugate(GL(2,Integers(n1)), G1,TwoIsogenousGroup(G2));
end function;

P2<x,y,z> := ProjectiveSpace(Rationals(),2);
f1 := x^2 + 64*y^2 + z^2;
f2 := 2*x^2 + y^2 + 64*z^2;
C1 := Conic(P2,f1);
C2 := Conic(P2,f2);
mm1, map1 := MinimalModel(C1);
mm2, map2 := MinimalModel(C2);
des1 := DefiningEquations(Inverse(map1));
des2 := DefiningEquations(map2);
phi := map<C1 -> C2 | [ Evaluate(des2[i],[des1[1],des1[2],des1[3]]) : i in [1..3]]>;
defpol := DefiningEquations(phi);
phiInv := Inverse(phi);
defpolinv := DefiningEquations(phiInv);

E1 := FinalModels["8.24.0.44"];
E2 := FinalModels["8.24.0.125"];
E3 := FinalModels["8.24.0.86"];
E4 := FinalModels["8.24.0.123"];
K1<a1,b1> := BaseField(E1);
K2<a2,b2> := BaseField(E2);


//function field maps go the op way.
vec := [Evaluate(defpolinv[i]/defpolinv[3],[a2,b2,1]) : i in [1,2]];
vecinv := [Evaluate(defpol[i]/defpol[3],[a1,b1,1]) : i in [1,2]];

psi := hom<K1 -> K2 |vec>;
psiInv := hom<K2 -> K1 |vecinv>;

E1Iso := IsogenousCurve(E1);
BaseField(E1Iso) eq BaseField(E1);

f := hom<K2->K2 |[-a2,-b2]>;

g := f*psi;

E1IsoImage := EllipticCurve([f(psi(K1!ai)): ai in aInvariants(E1Iso)]);

IsIsomorphic(E1IsoImage,E2);
//IsIsomorphic(E1IsoImage,QuadraticTwist(E2,-1));


//Now lets compute some nicer modles. 

k1 := "16.48.0.25";
k2 := "32.96.0.2";
k3 := "32.96.0.1";
k4 := "8.24.0.44";

/*
Let's get as many of the final models over the same base field.
*/


E1 := FinalModels["16.48.0.25"];
E2 := FinalModels["32.96.0.2"];
E3 := FinalModels["32.96.0.1"];
E4 := FinalModels["8.24.0.44"];


P2<x,y,z> := ProjectiveSpace(Rationals(),2);
f := x^2 + y^2 + z^2;
C := Conic(P2,f);

f1 := Evaluate(GroupModels[k1],[x,y,z]);
f2 := Evaluate(GroupModels[k2],[x,y,z]);
//f3 := Evaluate(GroupModels[k3],[x,y,z]);
f4 := Evaluate(GroupModels[k4],[x,y,z]);


C1 := Conic(P2,f1);
C2 := Conic(P2,f2);
//C3 := Conic(P2,f3);
C4 := Conic(P2,f4);


mm1, map1 := MinimalModel(C1);
mm2, map2 := MinimalModel(C2);
//mm3, map3 := MinimalModel(C4);
mm4, map4 := MinimalModel(C4);

assert mm1 eq C and mm2 eq C and mm4 eq C;


DE1 := DefiningEquations(map1);
DE2 := DefiningEquations(map2);
//DE3 := DefiningEquations(map4);
DE4 := DefiningEquations(map4);



K<a,b> := FunctionField(C);
K1<a1,b1> := BaseField(E1);
K2<a2,b2> := BaseField(E2);
//K3<a,b> := BaseField(E3);
K4<a4,b4> := BaseField(E4);

vec1 := [Evaluate(DE1[i]/DE1[3],[a,b,1]) : i in [1,2]];
vec2 := [Evaluate(DE2[i]/DE2[3],[a,b,1]) : i in [1,2]];
//vec3 := [Evaluate(DE3[i]/DE3[3],[a,b,1]) : i in [1,2]];
vec4 := [Evaluate(DE4[i]/DE4[3],[a,b,1]) : i in [1,2]];

psi1 := hom<K1 -> K |vec1>;
psi2 := hom<K2 -> K |vec2>;
//psi3 := hom<K3 -> K |vec3>;
psi4 := hom<K4 -> K |vec4>;


aInvs1 := [psi1(ainv) : ainv in aInvariants(E1)];
aInvs2 := [psi1(ainv) : ainv in aInvariants(E2)];
//aInvs3 := [psi1(ainv) : ainv in aInvariants(E3)];
aInvs4 := [psi1(ainv) : ainv in aInvariants(E4)];

E1Norm := EllipticCurve(aInvs1);
E2Norm := EllipticCurve(aInvs2);
//E3Norm := EllipticCurve(aInvs3);
E4Norm := EllipticCurve(aInvs4);

E1Clean := [
    0,
    2^2*(b^2 - 2*b - 1) *(b^2 + 2*b - 1),
    0,
    2^(3)*(b^2 + 1)^2*(b^2 + 2*b - 1)^2,
    0
];

IsIsomorphic(E1Norm, EllipticCurve(E1Clean));

E2Clean := [
    0,
    (2^6*(b^2 - 3)*(b^4 - 22*b^2 - 7)*(b^8 + 116*b^6 + 1462*b^4 + 4372*b^2 + 3281)*a  
        -2^2*(b^8 - 108*b^6 + 790*b^4 + 116*b^2 - 527)*(b^8 + 116*b^6 + 1462*b^4 + 4372*b^2 + 3281)),
    0,
    (-2^7)*(b^2-3)^4*(3*b^10 - 101*b^8 - 850*b^6 + 5126*b^4 + 5983*b^2 - 913)*(b^12 - 210*b^10 + 455*b^8 + 27236*b^6 + 2879*b^4 - 62834*b^2 - 35047)*a + 
    2^3*(b^2-3)^5*(b^22 - 993*b^20 + 80239*b^18 - 183591*b^16 - 25060758*b^14 - 46958090*b^12 +
        1283004574*b^10 + 3556278098*b^8 + 2155079365*b^6 - 1522506117*b^4 - 
        1813927741*b^2 - 391647931),
    0
];
IsIsomorphic(E2Norm, EllipticCurve(E2Clean));

E4Clean := [
    0,
    2*(b^2 + 1)*(64*b^4 - 16*b^3 + 144*b^2 - 16*b + 79)*(8*b^2 + 7),
    0,
    2^4*(b^2+1)^3*(32768*b^10 - 20480*b^9 + 245760*b^8 - 92160*b^7 + 660480*b^6 - 153216*b^5 + 
    833280*b^4 - 111840*b^3 + 504360*b^2 - 30305*b + 118568),
    0
];
IsIsomorphic(E4Norm, EllipticCurve(E4Clean));


E3Clean := [
    0,
    -2^2*(256*t^8 - 1024*t^7 - 1792*t^6 + 1792*t^5 + 1120*t^4 - 448*t^3 - 112*t^2 + 16*t + 
    1)*(256*t^8 + 1024*t^7 - 1792*t^6 - 1792*t^5 + 1120*t^4 + 448*t^3 - 112*t^2 - 16*t + 
    1),
    0,
    2^3*(4*t^2 + 1)^8*(256*t^8 - 1024*t^7 - 1792*t^6 + 1792*t^5 + 1120*t^4 - 448*t^3 - 112*t^2 + 16*t + 
    1)^2,
    0
];

E3Clean2 := [
    0,
    -2^2*(t^16 - 120*t^14 + 1820*t^12 - 8008*t^10 + 12870*t^8 - 8008*t^6 + 1820*t^4 - 120*t^2 + 1),
    0,
    2^3*(t^2+1)^8*(t^8 - 8*t^7 - 28*t^6 + 56*t^5 + 70*t^4 - 56*t^3 - 28*t^2 + 8*t + 1)^2,
    0
];

IsIsomorphic(E3, EllipticCurve(E3Clean));

for i in [1..#E3Clean] do
  Evaluate(E3Clean[i],t/2) eq E3Clean2[i];
end for;


